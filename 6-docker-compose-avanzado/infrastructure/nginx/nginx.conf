user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format with upstream info
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'ups_addr="$upstream_addr" ups_status="$upstream_status"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript 
               application/javascript application/xml+rss application/json;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=health:10m rate=2r/s;
    limit_req_zone $binary_remote_addr zone=metrics:10m rate=1r/s;

    # Upstream configuration for API backend
    upstream api_backend {
        least_conn;
        
        # API instances (will resolve via Docker DNS)
        server api:3000 max_fails=3 fail_timeout=30s weight=1;
        
        # Keepalive connections
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Health check for upstreams
    server {
        listen 8081;
        server_name localhost;
        access_log off;
        
        location /upstream_health {
            proxy_pass http://api_backend/health;
            proxy_set_header Host $host;
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
    }

    # Main server configuration
    server {
        listen 80;
        server_name localhost;
        
        # Security
        server_tokens off;

        # Load balancer health check
        location /health {
            limit_req zone=health burst=5 nodelay;
            access_log off;
            return 200 "nginx-lb-healthy\n";
            add_header Content-Type text/plain;
        }

        # Nginx status for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 172.20.0.0/16;  # Docker networks
            deny all;
        }

        # API endpoints with load balancing
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            # Proxy to upstream
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Load-Balancer nginx;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Error handling and retries
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 30s;
            
            # Caching for GET requests
            proxy_cache_methods GET HEAD;
            add_header X-Cache-Status $upstream_cache_status;
        }

        # Health check proxy
        location /health {
            limit_req zone=health burst=5 nodelay;
            
            proxy_pass http://api_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Metrics aggregation endpoint
        location /metrics {
            limit_req zone=metrics burst=3 nodelay;
            
            # Custom metrics aggregation
            content_by_lua_block {
                local http = require "resty.http"
                local httpc = http.new()
                
                -- Aggregate metrics from all API instances
                local res, err = httpc:request_uri("http://api:3000/metrics")
                if res then
                    ngx.say(res.body)
                else
                    ngx.status = 503
                    ngx.say("# HELP metrics_error Error fetching metrics")
                    ngx.say("metrics_error 1")
                end
            }
            
            # Fallback si no hay Lua
            proxy_pass http://api_backend/metrics;
            proxy_set_header Host $host;
        }

        # Frontend static files
        location / {
            # Try frontend service first, fallback to local
            proxy_pass http://frontend:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Fallback error page
            error_page 502 503 504 = @fallback;
        }

        # Fallback for frontend
        location @fallback {
            return 503 '<!DOCTYPE html>
<html>
<head><title>Service Unavailable</title></head>
<body>
<h1>503 Service Unavailable</h1>
<p>The application is temporarily unavailable. Please try again later.</p>
<p><small>Load Balancer: nginx</small></p>
</body>
</html>';
            add_header Content-Type text/html;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            internal;
            return 404 '{"error": "Not found", "load_balancer": "nginx"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            internal;
            return 500 '{"error": "Internal server error", "load_balancer": "nginx"}';
            add_header Content-Type application/json;
        }
    }

    # HTTPS server (if SSL certificates are available)
    server {
        listen 443 ssl http2;
        server_name localhost;
        
        # SSL configuration
        ssl_certificate /etc/ssl/certs/server.crt;
        ssl_certificate_key /etc/ssl/certs/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        
        # Security headers for HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Same configuration as HTTP server
        include /etc/nginx/conf.d/ssl-common.conf;
        
        # Redirect all traffic to HTTP for simplicity in development
        return 301 http://$server_name$request_uri;
    }
} 