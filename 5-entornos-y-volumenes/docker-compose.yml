
services:
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ../4-docker-compose-basico/servicios/frontend/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api
    networks:
      - frontend

  api:
    build: ../3-dockerfile-optimizacion/api-node-optimizada
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - PORT=${API_PORT:-3000}
      - DEBUG=${DEBUG:-false}
    depends_on:
      - database
    networks:
      - frontend
      - backend

  database:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=${DB_NAME:-myapp}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../4-docker-compose-basico/servicios/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend
      - backup

  # Servicio de logs
  logging:
    image: alpine:latest
    command: ["sh", "-c", "while true; do echo 'Log entry at' $(date) >> /logs/app.log; sleep 30; done"]
    volumes:
      - app_logs:/logs

  # Servicio de backup
  backup:
    image: postgres:14-alpine
    command: ["sh", "-c", "while true; do pg_dump ${DATABASE_URL} > /backups/backup_$(date +%Y%m%d_%H%M%S).sql 2>/dev/null || echo 'Backup failed'; sleep 3600; done"]
    volumes:
      - ./volumes/backups:/backups
      - postgres_data:/var/lib/postgresql/data:ro
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - database
    networks:
      - backup

volumes:
  postgres_data:
  app_logs:
    driver: local

networks:
  frontend:
  backend:
  backup:
